// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.4'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.7.3'
    }
}

allprojects {
    repositories {
        maven {
            url "https://maven.google.com"
        }
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext {
    versionCode = 1
    versionName = '0.1.3'

    minSdkVersion = 16
    targetSdkVersion = 27
    compileSdkVersion = 27

    supportVersion = '27.1.1'
    playServicesVersion = '15.0.1'
    masterBranch = "master"
}

subprojects { subproject ->
    repositories {
        google()
        jcenter()
    }

    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'

    afterEvaluate { project ->

        if (runningInCIServer()) {

            println("Running in CI Server")
            if (project.hasProperty('androidArtifactType')) {

                println("androidArtifactType == " + androidArtifactType)
                println("gitBranch() == " + gitBranch())
                if (androidArtifactType == "aar") {
                    if (uploadToArtifactory()) {
                        println("Uploading to Artifactory")
                        println("ARTIFACTORY_USERNAME " + isVariableSet("ARTIFACTORY_USERNAME"))
                        println("ARTIFACTORY_PASSWORD " + isVariableSet("ARTIFACTORY_PASSWORD"))
                        println("Project name :" + project.getName())
                        artifactoryPublish.dependsOn('assembleDebug', 'assembleRelease')
                        publishing.publications {
                            debugaar(MavenPublication) {
                                groupId = "co.intersection.debug"
                                artifactId = "google-maps-clustering-debug"
                                version = majorVersion
                                artifact("$buildDir/outputs/aar/google-maps-clustering-debug.aar")
                            }

                            releaseaar(MavenPublication) {
                                groupId = "co.intersection.release"
                                artifactId = "google-maps-clustering-release"
                                version = majorVersion
                                artifact("$buildDir/outputs/aar/google-maps-clustering-release.aar")
                            }
                        }

                        artifactoryPublish {
                            publications(publishing.publications.debugaar)
                            publications(publishing.publications.releaseaar)
                        }
                    }
                }
            }
        }
    }
}

artifactory {
    contextUrl = 'https://intersection.jfrog.io/intersection'
    publish {
        repository {
            repoKey = 'google-maps-clustering'
            username = System.getenv("ARTIFACTORY_USERNAME")
            password = System.getenv("ARTIFACTORY_PASSWORD")
            maven = true
        }
        defaults {
            publishBuildInfo = true
            publishArtifacts = true
            publishPom = false
        }
    }
    resolve {
        repoKey = 'google-maps-clustering'
        username = System.getenv("ARTIFACTORY_USERNAME")
        password = System.getenv("ARTIFACTORY_PASSWORD")
        maven = true
    }
}

static def isVariableSet(String variableName) {
    def variableValue = System.getenv(variableName)
    return variableValue == null ? "null" : variableValue == "" ? "missing" : "set"
}

static def runningInCIServer() {
    return System.env['BUILDKITE'] as boolean
}

def uploadToArtifactory() {
    return runningInCIServer() && gitBranch() == rootProject.ext.masterBranch
}

static def gitBranch() {
    //buildkite checks out a specific commit instead of a branch, branch info is available in an env var
    if (System.getenv("BUILDKITE_BRANCH") != null) {
        return System.getenv("BUILDKITE_BRANCH")
    }
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()

    return branch
}
